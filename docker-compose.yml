version: '3.8'

services:
  # Redis for API Gateway Rate Limiting
  redis:
    image: redis:7-alpine
    container_name: library-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - library-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Eureka Server for Service Discovery
  eureka-server:
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    container_name: library-eureka-server
    restart: unless-stopped
    ports:
      - "8761:8761"
    networks:
      - library-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8761/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  # API Gateway
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: library-api-gateway
    restart: unless-stopped
    environment:
      - EUREKA_SERVER_URL=http://eureka-server:8761/eureka/
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
    ports:
      - "8082:8080"
    depends_on:
      eureka-server:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - library-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL Database for Gamification Service
  postgres:
    image: postgres:15-alpine
    container_name: library-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: gamification_db
      POSTGRES_USER: gamification_user
      POSTGRES_PASSWORD: gamification_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - library-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gamification_user -d gamification_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MySQL Database for User and Search Services
  mysql:
    image: mysql:8.0
    container_name: library-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root123
      MYSQL_DATABASE: library_db
      MYSQL_USER: library_user
      MYSQL_PASSWORD: library_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - library-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB Database for Books Management Service
  mongodb:
    image: mongo:7.0
    container_name: library-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
      MONGO_INITDB_DATABASE: books_db
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - library-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # User Service (Spring Boot)
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: library-user-service
    restart: unless-stopped
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/library_db?useSSL=false&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: library_user
      SPRING_DATASOURCE_PASSWORD: library_password
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SERVER_PORT: 8081
      EUREKA_SERVER_URL: http://eureka-server:8761/eureka/
    ports:
      - "8081:8081"
    depends_on:
      mysql:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    networks:
      - library-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
  # Search Service (Spring Boot)
  search-service:
    build:
      context: ./search-service
      dockerfile: Dockerfile
    container_name: library-search-service
    restart: unless-stopped
    environment:
      SPRING_DATASOURCE_URL: jdbc:h2:mem:searchdb
      SPRING_DATASOURCE_USERNAME: mimou
      SPRING_DATASOURCE_PASSWORD: mimou123
      SPRING_H2_CONSOLE_ENABLED: true
      SERVER_PORT: 8084
      EUREKA_SERVER_URL: http://eureka-server:8761/eureka/
    ports:
      - "8084:8084"
    networks:
      - library-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8084/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Loan Service (Spring Boot)
  loan-service:
    build:
      context: ./loan-service
      dockerfile: Dockerfile
    container_name: library-loan-service
    restart: unless-stopped
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/library_db?useSSL=false&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: library_user
      SPRING_DATASOURCE_PASSWORD: library_password
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SERVER_PORT: 8083
      USER_SERVICE_URL: http://user-service:8081
      BOOKS_SERVICE_URL: http://books-management-service:8085
      GAMIFICATION_SERVICE_URL: http://gamification-service:3000
      EUREKA_SERVER_URL: http://eureka-server:8761/eureka/
    ports:
      - "8083:8083"
    depends_on:
      mysql:
        condition: service_healthy
      user-service:
        condition: service_healthy
      books-management-service:
        condition: service_healthy
    networks:
      - library-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8083/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Books Management Service (Spring Boot with MongoDB)
  books-management-service:
    build:
      context: ./books-management-service
      dockerfile: Dockerfile
    container_name: library-books-service
    restart: unless-stopped
    environment:
      SPRING_DATA_MONGODB_URI: mongodb://admin:admin123@mongodb:27017/books_db?authSource=admin
      SPRING_DATA_MONGODB_DATABASE: books_db
      SERVER_PORT: 8085
      JWT_SECRET: mySecretKey123456789012345678901234567890
      JWT_EXPIRATION: 86400000
      EUREKA_SERVER_URL: http://eureka-server:8761/eureka/
    ports:
      - "8085:8085"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - library-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8085/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Gamification Service (NestJS)
  gamification-service:
    build:
      context: ./gamification-microservice
      dockerfile: Dockerfile
    container_name: library-gamification-service
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=gamification_user
      - DB_PASSWORD=gamification_password
      - DB_DATABASE=gamification_db
      - TYPEORM_SYNCHRONIZE=true
      - TYPEORM_LOGGING=false
      - EUREKA_SERVER_URL=http://eureka-server:8761/eureka/
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - library-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/docs || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # React Frontend
  frontend:
    build:
      context: ./library-front-react
      dockerfile: Dockerfile
    container_name: library-frontend
    restart: unless-stopped
    environment:
      - REACT_APP_API_GATEWAY_URL=http://localhost:8082
      - REACT_APP_USER_SERVICE_URL=http://localhost:8082
      - REACT_APP_BOOKS_SERVICE_URL=http://localhost:8082
      - REACT_APP_LOAN_SERVICE_URL=http://localhost:8082
      - REACT_APP_SEARCH_SERVICE_URL=http://localhost:8082
      - REACT_APP_GAMIFICATION_SERVICE_URL=http://localhost:8082
    ports:
      - "80:80"
    depends_on:
      - api-gateway
    networks:
      - library-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

# Docker volumes
volumes:
  postgres_data:
    driver: local
  mysql_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local

# Docker networks
networks:
  library-network:
    driver: bridge
